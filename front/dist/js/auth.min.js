function Auth(){this.markWrapper=$(".mark-wrapper"),this.scrollWrapper=$(".auth-scroll-wrapper")}Auth.prototype.showEvent=function(){this.markWrapper.show()},Auth.prototype.hideEvent=function(){this.markWrapper.hide()},Auth.prototype.listenShowHideEvent=function(){var e=this,n=$(".close-btn"),t=$(".signin-btn"),o=$(".signup-btn");console.log(5),t.click(function(){console.log(1),e.showEvent(),e.scrollWrapper.css({left:0})}),o.click(function(){console.log(2),e.showEvent(),e.scrollWrapper.css({left:-400})}),n.click(function(){console.log(3),e.hideEvent()})},Auth.prototype.listenSwitchEvent=function(){var n=this;$(".switch").click(function(){var e=n.scrollWrapper.css("left");(e=parseInt(e))<0?n.scrollWrapper.animate({left:"0"}):n.scrollWrapper.animate({left:"-400"})})},Auth.prototype.listenSigninEvent=function(){var i=this,e=$(".signin-group"),n=e.find("input[name='telephone']"),t=e.find("input[name='password']"),o=e.find("input[name='remember']");e.find(".submit-btn").click(function(){telephone=n.val(),password=t.val(),remember=o.prop("checked"),xfzajax.post({url:"/account/login/",data:{telephone:telephone,password:password,remember:remember?1:0},success:function(e){if(200==e.code)i.hideEvent(),window.location.reload();else{var n=e.message;if("string"==typeof n||n.constructor==String)window.messageBox.show(n);else for(var t in n){var o=n[t][0];window.messageBox.show(o)}}},fail:function(e){console.log(e)}})})},Auth.prototype.run=function(){var e=this;e.listenShowHideEvent(),e.listenSwitchEvent(),e.listenSigninEvent()},$(function(){(new Auth).run()});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF1dGguanMiXSwibmFtZXMiOlsiQXV0aCIsInRoaXMiLCJtYXJrV3JhcHBlciIsIiQiLCJzY3JvbGxXcmFwcGVyIiwicHJvdG90eXBlIiwic2hvd0V2ZW50Iiwic2hvdyIsImhpZGVFdmVudCIsImhpZGUiLCJsaXN0ZW5TaG93SGlkZUV2ZW50Iiwic2VsZiIsImNsb3NlQnRuIiwic2lnbmluQnRuIiwic2lnbnVwQnRuIiwiY29uc29sZSIsImxvZyIsImNsaWNrIiwiY3NzIiwibGVmdCIsImxpc3RlblN3aXRjaEV2ZW50IiwiY3VycmVudExlZnQiLCJwYXJzZUludCIsImFuaW1hdGUiLCJsaXN0ZW5TaWduaW5FdmVudCIsInNpZ25pbkdyb3VwIiwidGVsZXBob25lSW5ucHV0IiwiZmluZCIsInBhc3N3b3JkSW5wdXQiLCJyZW1lbWJlcklucHV0IiwidGVsZXBob25lIiwidmFsIiwicGFzc3dvcmQiLCJyZW1lbWJlciIsInByb3AiLCJ4ZnphamF4IiwicG9zdCIsInVybCIsImRhdGEiLCJzdWNjZXNzIiwicmVzdWx0Iiwid2luZG93IiwibG9jYXRpb24iLCJyZWxvYWQiLCJtZXNzYWdlT2JqZWN0IiwiY29uc3RydWN0b3IiLCJTdHJpbmciLCJtZXNzYWdlQm94Iiwia2V5IiwibWVzc2FnZSIsImZhaWwiLCJlcnJvciIsInJ1biJdLCJtYXBwaW5ncyI6IkFBd0JBLFNBQVNBLE9BQ01DLEtBQ05DLFlBQWNDLEVBQUUsaUJBRFZGLEtBRU5HLGNBQWdCRCxFQUFFLHdCQUczQkgsS0FBS0ssVUFBVUMsVUFBWSxXQUNaTCxLQUNOQyxZQUFZSyxRQUdyQlAsS0FBS0ssVUFBVUcsVUFBWSxXQUNaUCxLQUNOQyxZQUFZTyxRQUdyQlQsS0FBS0ssVUFBVUssb0JBQXNCLFdBQ2pDLElBQUlDLEVBQU9WLEtBQ1BXLEVBQVdULEVBQUUsY0FDYlUsRUFBWVYsRUFBRSxlQUNkVyxFQUFZWCxFQUFFLGVBQ2xCWSxRQUFRQyxJQUFJLEdBRVpILEVBQVVJLE1BQU0sV0FDWkYsUUFBUUMsSUFBSSxHQUNaTCxFQUFLTCxZQUNMSyxFQUFLUCxjQUFjYyxJQUFJLENBQUNDLEtBQU8sTUFHbkNMLEVBQVVHLE1BQU0sV0FDWkYsUUFBUUMsSUFBSSxHQUNaTCxFQUFLTCxZQUNMSyxFQUFLUCxjQUFjYyxJQUFJLENBQUNDLE1BQVEsUUFHcENQLEVBQVNLLE1BQU0sV0FDWEYsUUFBUUMsSUFBSSxHQUNaTCxFQUFLSCxlQUliUixLQUFLSyxVQUFVZSxrQkFBb0IsV0FDL0IsSUFBSVQsRUFBT1YsS0FDSUUsRUFBRSxXQUNSYyxNQUFNLFdBQ1gsSUFBSUksRUFBY1YsRUFBS1AsY0FBY2MsSUFBSSxTQUN6Q0csRUFBY0MsU0FBU0QsSUFDUixFQUNYVixFQUFLUCxjQUFjbUIsUUFBUSxDQUFDSixLQUFPLE1BRW5DUixFQUFLUCxjQUFjbUIsUUFBUSxDQUFDSixLQUFPLFlBSy9DbkIsS0FBS0ssVUFBVW1CLGtCQUFvQixXQUMvQixJQUFJYixFQUFPVixLQUNQd0IsRUFBY3RCLEVBQUUsaUJBQ2hCdUIsRUFBa0JELEVBQVlFLEtBQUssMkJBQ25DQyxFQUFnQkgsRUFBWUUsS0FBSywwQkFDakNFLEVBQWdCSixFQUFZRSxLQUFLLDBCQUVyQkYsRUFBWUUsS0FBSyxlQUN2QlYsTUFBTSxXQUNaYSxVQUFZSixFQUFnQkssTUFDNUJDLFNBQVdKLEVBQWNHLE1BQ3pCRSxTQUFXSixFQUFjSyxLQUFLLFdBRTlCQyxRQUFRQyxLQUFLLENBQ1RDLElBQU0sa0JBQ05DLEtBQU8sQ0FDSFIsVUFBWUEsVUFDWkUsU0FBV0EsU0FDWEMsU0FBV0EsU0FBUyxFQUFFLEdBRTFCTSxRQUFVLFNBQVVDLEdBQ2hCLEdBQXFCLEtBQWpCQSxFQUFhLEtBQ2I3QixFQUFLSCxZQUNMaUMsT0FBT0MsU0FBU0MsYUFDZixDQUNELElBQUlDLEVBQWdCSixFQUFnQixRQUNwQyxHQUEwQixpQkFBaEJJLEdBQTBCQSxFQUFjQyxhQUFhQyxPQUMzREwsT0FBT00sV0FBV3hDLEtBQUtxQyxRQUV2QixJQUFJLElBQUlJLEtBQU9KLEVBQWMsQ0FDekIsSUFDSUssRUFEV0wsRUFBY0ksR0FDTixHQUN2QlAsT0FBT00sV0FBV3hDLEtBQUswQyxNQUt2Q0MsS0FBTyxTQUFVQyxHQUNicEMsUUFBUUMsSUFBSW1DLFNBTTVCbkQsS0FBS0ssVUFBVStDLElBQU0sV0FDakIsSUFBSXpDLEVBQU9WLEtBQ1hVLEVBQUtELHNCQUNMQyxFQUFLUyxvQkFDTFQsRUFBS2EscUJBR1RyQixFQUFFLFlBQ2EsSUFBSUgsTUFDVm9EIiwiZmlsZSI6ImF1dGgubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXHJcbi8vICQoZnVuY3Rpb24gKCkge1xyXG4vLyAgICAgJCgnI2J0bicpLmNsaWNrKGZ1bmN0aW9uICgpIHtcclxuLy8gICAgICAgICAkKCcubWFyay13cmFwcGVyJykuc2hvdygpO1xyXG4vLyAgICAgfSk7XHJcbi8vXHJcbi8vICAgICAkKCcuY2xvc2UtYnRuJykuY2xpY2soZnVuY3Rpb24gKCkge1xyXG4vLyAgICAgICAgICQoJy5tYXJrLXdyYXBwZXInKS5oaWRlKCk7XHJcbi8vICAgICB9KTtcclxuLy8gfSk7XHJcbi8vXHJcbi8vICQoZnVuY3Rpb24gKCkge1xyXG4vLyAgICAgJCgnLnN3aXRjaCcpLmNsaWNrKGZ1bmN0aW9uICgpIHtcclxuLy8gICAgICAgICB2YXIgc2Nyb2xsV3JhcHBlciA9ICQoJy5hdXRoLXNjcm9sbC13cmFwcGVyJyk7XHJcbi8vICAgICAgICAgdmFyIGN1cnJlbnRMZWZ0ID0gc2Nyb2xsV3JhcHBlci5jc3MoJ2xlZnQnKTtcclxuLy8gICAgICAgICBjdXJyZW50TGVmdCA9IHBhcnNlSW50KGN1cnJlbnRMZWZ0KTtcclxuLy8gICAgICAgICBpZihjdXJyZW50TGVmdDwwKXtcclxuLy8gICAgICAgICAgICAgc2Nyb2xsV3JhcHBlci5hbmltYXRlKHsnbGVmdCc6JzAnfSlcclxuLy8gICAgICAgICB9ZWxzZXtcclxuLy8gICAgICAgICAgICAgc2Nyb2xsV3JhcHBlci5hbmltYXRlKHsnbGVmdCc6Jy00MDAnfSlcclxuLy8gICAgICAgICB9XHJcbi8vICAgICB9KVxyXG4vLyB9KTtcclxuXHJcbmZ1bmN0aW9uIEF1dGgoKXtcclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgIHNlbGYubWFya1dyYXBwZXIgPSAkKCcubWFyay13cmFwcGVyJyk7XHJcbiAgICBzZWxmLnNjcm9sbFdyYXBwZXIgPSAkKCcuYXV0aC1zY3JvbGwtd3JhcHBlcicpO1xyXG59XHJcblxyXG5BdXRoLnByb3RvdHlwZS5zaG93RXZlbnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICBzZWxmLm1hcmtXcmFwcGVyLnNob3coKTtcclxufTtcclxuXHJcbkF1dGgucHJvdG90eXBlLmhpZGVFdmVudCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgIHNlbGYubWFya1dyYXBwZXIuaGlkZSgpO1xyXG59O1xyXG5cclxuQXV0aC5wcm90b3R5cGUubGlzdGVuU2hvd0hpZGVFdmVudCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgIHZhciBjbG9zZUJ0biA9ICQoJy5jbG9zZS1idG4nKTtcclxuICAgIHZhciBzaWduaW5CdG4gPSAkKCcuc2lnbmluLWJ0bicpO1xyXG4gICAgdmFyIHNpZ251cEJ0biA9ICQoJy5zaWdudXAtYnRuJyk7XHJcbiAgICBjb25zb2xlLmxvZyg1KTtcclxuXHJcbiAgICBzaWduaW5CdG4uY2xpY2soZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKDEpO1xyXG4gICAgICAgIHNlbGYuc2hvd0V2ZW50KCk7XHJcbiAgICAgICAgc2VsZi5zY3JvbGxXcmFwcGVyLmNzcyh7J2xlZnQnOjB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIHNpZ251cEJ0bi5jbGljayhmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coMik7XHJcbiAgICAgICAgc2VsZi5zaG93RXZlbnQoKTtcclxuICAgICAgICBzZWxmLnNjcm9sbFdyYXBwZXIuY3NzKHsnbGVmdCc6LTQwMH0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgY2xvc2VCdG4uY2xpY2soZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKDMpO1xyXG4gICAgICAgIHNlbGYuaGlkZUV2ZW50KCk7XHJcbiAgICB9KTtcclxufTtcclxuXHJcbkF1dGgucHJvdG90eXBlLmxpc3RlblN3aXRjaEV2ZW50ID0gZnVuY3Rpb24oKXtcclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgIHZhciBzd2l0Y2hlciA9ICQoJy5zd2l0Y2gnKTtcclxuICAgIHN3aXRjaGVyLmNsaWNrKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgY3VycmVudExlZnQgPSBzZWxmLnNjcm9sbFdyYXBwZXIuY3NzKCdsZWZ0Jyk7XHJcbiAgICAgICAgY3VycmVudExlZnQgPSBwYXJzZUludChjdXJyZW50TGVmdCk7XHJcbiAgICAgICAgaWYoY3VycmVudExlZnQ8MCl7XHJcbiAgICAgICAgICAgIHNlbGYuc2Nyb2xsV3JhcHBlci5hbmltYXRlKHsnbGVmdCc6JzAnfSlcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgc2VsZi5zY3JvbGxXcmFwcGVyLmFuaW1hdGUoeydsZWZ0JzonLTQwMCd9KVxyXG4gICAgICAgIH1cclxuICAgIH0pXHJcbn07XHJcblxyXG5BdXRoLnByb3RvdHlwZS5saXN0ZW5TaWduaW5FdmVudCA9IGZ1bmN0aW9uKCl7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICB2YXIgc2lnbmluR3JvdXAgPSAkKCcuc2lnbmluLWdyb3VwJyk7XHJcbiAgICB2YXIgdGVsZXBob25lSW5ucHV0ID0gc2lnbmluR3JvdXAuZmluZChcImlucHV0W25hbWU9J3RlbGVwaG9uZSddXCIpO1xyXG4gICAgdmFyIHBhc3N3b3JkSW5wdXQgPSBzaWduaW5Hcm91cC5maW5kKFwiaW5wdXRbbmFtZT0ncGFzc3dvcmQnXVwiKTtcclxuICAgIHZhciByZW1lbWJlcklucHV0ID0gc2lnbmluR3JvdXAuZmluZChcImlucHV0W25hbWU9J3JlbWVtYmVyJ11cIik7XHJcblxyXG4gICAgdmFyIHN1Ym1pdEJ0biA9IHNpZ25pbkdyb3VwLmZpbmQoXCIuc3VibWl0LWJ0blwiKTtcclxuICAgIHN1Ym1pdEJ0bi5jbGljayhmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGVsZXBob25lID0gdGVsZXBob25lSW5ucHV0LnZhbCgpO1xyXG4gICAgICAgIHBhc3N3b3JkID0gcGFzc3dvcmRJbnB1dC52YWwoKTtcclxuICAgICAgICByZW1lbWJlciA9IHJlbWVtYmVySW5wdXQucHJvcChcImNoZWNrZWRcIik7XHJcblxyXG4gICAgICAgIHhmemFqYXgucG9zdCh7XHJcbiAgICAgICAgICAgICd1cmwnOicvYWNjb3VudC9sb2dpbi8nLFxyXG4gICAgICAgICAgICAnZGF0YSc6e1xyXG4gICAgICAgICAgICAgICAgJ3RlbGVwaG9uZSc6dGVsZXBob25lLFxyXG4gICAgICAgICAgICAgICAgJ3Bhc3N3b3JkJzpwYXNzd29yZCxcclxuICAgICAgICAgICAgICAgICdyZW1lbWJlcic6cmVtZW1iZXI/MTowLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAnc3VjY2Vzcyc6ZnVuY3Rpb24gKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdFsnY29kZSddID09MjAwKXtcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLmhpZGVFdmVudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcclxuICAgICAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtZXNzYWdlT2JqZWN0ID0gcmVzdWx0WydtZXNzYWdlJ107XHJcbiAgICAgICAgICAgICAgICAgICAgaWYodHlwZW9mIG1lc3NhZ2VPYmplY3QgPT0nc3RyaW5nJ3x8bWVzc2FnZU9iamVjdC5jb25zdHJ1Y3Rvcj09U3RyaW5nKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93Lm1lc3NhZ2VCb3guc2hvdyhtZXNzYWdlT2JqZWN0KTtcclxuICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yKHZhciBrZXkgaW4gbWVzc2FnZU9iamVjdCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWVzc2FnZXMgPSBtZXNzYWdlT2JqZWN0W2tleV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWVzc2FnZSA9IG1lc3NhZ2VzWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93Lm1lc3NhZ2VCb3guc2hvdyhtZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgJ2ZhaWwnOmZ1bmN0aW9uIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgIH0pXHJcblxyXG59O1xyXG5BdXRoLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICBzZWxmLmxpc3RlblNob3dIaWRlRXZlbnQoKTtcclxuICAgIHNlbGYubGlzdGVuU3dpdGNoRXZlbnQoKTtcclxuICAgIHNlbGYubGlzdGVuU2lnbmluRXZlbnQoKTtcclxufTtcclxuXHJcbiQoZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIGF1dGggPSBuZXcgQXV0aCgpO1xyXG4gICAgYXV0aC5ydW4oKTtcclxuXHJcbn0pO1xyXG5cclxuXHJcblxyXG4iXX0=
